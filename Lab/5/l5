Yonatan Carver
CS265 - Advanced Programming
Lab 05

ABSTRACT DATA TYPES
--------------------------
Q1. Describe each of the following ADTs:
	i. List
		A sequence of linked elements (each current element points to the next
		element)

	ii. Stack
		Items inserted will be placed on top of all other items (last in first out, LIFO)
		Items can be pushed (stored) or popped (retrieved)

	iii. Queue
		Items will be accessed via the first in first out method

	iv. Dictionary (map)
		Holds both a key and its contents (that are linked to that key)
		( e.g. in Python: {key : contents, key2 : contents2} )


SEARCHING/ANALYSIS
--------------------------
Q2. Given a sorted array with n items, how many times (at most) will the binary
search compare elements? Explain your answer.
	log_2(n) times. Each search will get rid of half of the items.

Q3. Given an array with n items, how many times (at most) will the linear search
compare elements? Explain your answer.
	n times. The search must traverse the entire list until the desired element.

Q4. Give an example when using linear search would be preferable over the binary search.
	An unsorted list

SORTING
--------------------------
Q5. Show the effect of the quicksort, from the lecture notes, on following array
(always choose the left-most element in a sub-array as the pivot). Show the array
at the beginning of each level of calls. Mark the pivot of each sub-array.
	*84* 37 93 82 98 27 63 73 93 27 75 55 45 8

	*84* 37  93  82  98  27  63  73  93  27  75  55  45  8
	*37* 82  27  63  73  27  75  55  45  8   84  93  98  93
	*27* 27  8   37  82  63  73  75  55  45  84  93  98  93
	 8   27  27  37 *82* 63  73  75  55  45  84  93  98  93
	 8   27  27  37 *63* 73  75  55  45  82  84  93  98  93
	 8   27  27  37 *55* 45  63  73  75  82  84  93  98  93
	 8   27  27  37  45  55  63 *73* 75  82  84  93  98  93
	 8   27  27  37  45  55  63  73  75  82  84 *93* 98  93
	 8   27  27  37  45  55  63  73  75  82  84  93  93  98

POINTERS & REFERENCES
--------------------------
Q6. See the file d1.c from the lab directory. Display the list that's built.
	3, 24, 06

Q7. See the file ll.py from the lab directory. Display the list that's built.
	[13, [28, [24, [3, None]]]]

Q8. Compile and run the file ptrs.c from the lab directory. Why are the 2 sets of
outputs different? What's going on there?
	The first output puts the strings in a 100 byte buffer whereas on line 38,
	100 bytes of memory is allocated in another location.

Q9. See the file hash.c from the lab directory. Display the resulting table.
	HASH		NAME
	3		[Bob, 38], [Cos, 86]
	4		[Vera, 99], [Nash, 11], [Kate, 28], [Jaga, 24]
	5		[Jesse, 78]

Q10. From the table above, write a function called find, that takes a key and a
reference to an integer, fills in the reference w/the appropriate value (if found),
and returns 1 (true). If the key is not found, return 0 (false). You may assume
that p_ans already points to a valid location. So:
	int find( char *key, int *p_ans );

	int find ( char *key, int *p_ans ) {

		int h = hash(key);
		entry *p;
		p = table[h];

		while (table[h] != NULL) {
			if (p->key == key) {
				*p_ans=p->val;
				return 1;
			}
		}
		return 0;
	}

